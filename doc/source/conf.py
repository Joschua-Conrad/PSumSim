# Configuration file for the Sphinx documentation builder.
#
# This file only contains a selection of the most common options. For a full
# list see the documentation:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
# import os
# import sys
# sys.path.insert(0, os.path.abspath('.'))

import os
import sys
import datetime
sys.path.insert(0, os.path.abspath('../..'))


# -- Project information -----------------------------------------------------

thisyear = datetime.date.today().strftime("%Y")
project = 'PSumSim'
copyright = thisyear + ', Joschua Conrad <joschua.conrad@uni-ulm.de>. All rights reserved'
author = 'Joschua Conrad <joschua.conrad@uni-ulm.de>'

# The short X.Y version from package
# This read the VERSION.txt file.
#with open("../../connfig/VERSION.txt", "rt") as fobj:
#	version = fobj.read()
from psumsim import __version__ as version
version = version.strip()

# The full version, including alpha/beta/rc tags
release = version

# A dictionary to get the just defined keys as substitutions
substitutions = {
	"project": project,
	"copyright": copyright,
	"author": author,
	"version": version,
	"release": release,
}


# -- General configuration ---------------------------------------------------

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
	#Automatically create documentation from docstrings
	#Its directives are invoked from other extensions
    'sphinx.ext.autodoc',
	#Create index pages for modules
	#This is nice for navigating thru a chain of index pages
	#It uses autodoc
	'sphinx.ext.autosummary',
	#Links to the documentation of other projects
    'sphinx.ext.intersphinx',
	#Formulas rendered as MATHJAX formulas
    'sphinx.ext.mathjax',
	#There are links from documentation to the source code files.
    'sphinx.ext.viewcode',
	#Nicer links, adds function prototypes automatically, finds roles, ...
	#This is tightlx coupled to autodoc!
	'sphinx.ext.napoleon',
	#Convert commandline help to reST help
	'sphinxarg.ext',
	#Markdown support. See
	#https://myst-parser.readthedocs.io/en/latest/syntax/syntax.html
	#for syntax.
	'myst_parser',
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = 'en'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = []

# Figures with a caption are numbered within the section numbering
# Same for tables
numfig = True
numfig_secnum_depth = 1

# What happens to code blocks, set with e.g. code-block directive
# https://pygments.org/docs/lexers/
# Remove trailing white spaces
highlight_options = {
  'default': {'stripall': True},
}

# All forumlas get a number like (5)
math_number_all = True
math_eqref_format = r'({number})'

# Added class documentation refers to Python documentation
primary_domain = 'py'
# Links can be of any target type: Documents, terms, ...
default_role = 'any'

# Connect file endings and parsers
source_suffix = {
	'.rst': 'restructuredtext',
	'.md': 'markdown',
}

#Extensions for markdown parser
myst_enable_extensions = [
	#Substitute strings
	"substitution"
]

#Define the saem default substitutions like SPhinx provides
myst_substitutions = {
	**substitutions
}

#Up to depth 3, markdown document headings automatically create targets.
#That way, the markdown github-style cross-referenceing works in a .md
#document displayed on github as well as in the built documentation.
#So we do not have to add (label)= over markdown headings to reference them
#then with {std:ref}`label`, which looks nice in HTML docs, but horrible on
#Github. Because myst builds page after page, cross-referenceing into other
#.md files as with [License](License.md) still does not work in html build.
myst_heading_anchors = 3

# -- Configure Extension -----------------------------------------------------

autodoc_default_options = {
		#Autodoc works recursive
		'members':True,
		#Members without docstring are shown. Maybe the docs are
		#flooded with locals, __all__, etc.
		'undoc-members':True,
		#Private members are also shown
		'private-members':True,
		#Special members are also shown (like __init__)
		'special-members':True,
		#Base classes are listed
		'show-inheritance':True,
}
	
# __init__ of a class is treated as special function and is visible as its own,
# because we enabled private members in autodoc. If this would be false, the
# class docstring and __init__ dostring would be merged to one.
napoleon_include_init_with_doc = True
# Add options being consistent with autodoc
napoleon_include_private_with_doc = True
napoleon_include_special_with_doc = True
#Attributes are set with :ivar: role
napoleon_use_ivar = True

#Autosummary Stub pages will be created by default automatically
autosummary_generate = True

#Ignore some member names, which would flood the documentation.
def skip_member(app, what, name, obj, skip, options):
	badnames = (
			"__all__",
			"__annotations__",
			"__module__",
			"__weakref__",
			"__dict__",
	)
	
	if name in badnames:
		return True
	
#add event which skips some members for autodoc.
def setup(app):
	app.connect('autodoc-skip-member', skip_member)
	

# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
# Use commonly used readthedocs.io theme. Needs to be installed, but is listed
# in our dependencies.
html_theme = 'sphinx_rtd_theme'
html_theme_options = {
		# Show expandable subsections in sidebar TOC
		'collapse_navigation' : False,
		# Large TOC depth. Remove this option, if docs
		# building takes too long.
		'navigation_depth' : -1,
}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Logo of university
html_logo = '_static/logo-uni-ulm.svg'

# -- Extension configuration -------------------------------------------------

# -- Options for intersphinx extension ---------------------------------------

# Example configuration for intersphinx: refer to the Python standard library.
intersphinx_mapping = {
		'python': ('https://docs.python.org/3/', None),
		'numpy': ('https://numpy.org/doc/stable/', None),
		'scipy': ('https://docs.scipy.org/doc/scipy/', None),
		'matplotlib': ('https://matplotlib.org/stable/', None),
		'pytest' : ('https://docs.pytest.org/en/latest/', None),
}

# Define named link targets here
rst_epilog = r"""
"""

# Add substitutions to epilog, such one can use them just like in markdown
for k, v in substitutions.items():
	rst_epilog += f".. |{k}| replace:: {v}\n"

